// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/chain710/manga/internal/db"
	migrate "github.com/golang-migrate/migrate/v4"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// BatchUpdateVolumeProgress provides a mock function with given fields: ctx, opt
func (_m *Interface) BatchUpdateVolumeProgress(ctx context.Context, opt db.BatchUpdateVolumeProgressOptions) error {
	ret := _m.Called(ctx, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.BatchUpdateVolumeProgressOptions) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBook provides a mock function with given fields: ctx, b
func (_m *Interface) CreateBook(ctx context.Context, b *db.Book) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Book) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLibrary provides a mock function with given fields: ctx, l
func (_m *Interface) CreateLibrary(ctx context.Context, l *db.Library) error {
	ret := _m.Called(ctx, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Library) error); ok {
		r0 = rf(ctx, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: ctx, options
func (_m *Interface) DeleteBook(ctx context.Context, options db.DeleteBookOptions) error {
	ret := _m.Called(ctx, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DeleteBookOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLibrary provides a mock function with given fields: ctx, opt
func (_m *Interface) DeleteLibrary(ctx context.Context, opt db.DeleteLibraryOptions) error {
	ret := _m.Called(ctx, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DeleteLibraryOptions) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBook provides a mock function with given fields: ctx, opt
func (_m *Interface) GetBook(ctx context.Context, opt db.GetBookOptions) (*db.Book, error) {
	ret := _m.Called(ctx, opt)

	var r0 *db.Book
	if rf, ok := ret.Get(0).(func(context.Context, db.GetBookOptions) *db.Book); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.GetBookOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookThumbnail provides a mock function with given fields: ctx, id
func (_m *Interface) GetBookThumbnail(ctx context.Context, id int64) (*db.BookThumbnail, error) {
	ret := _m.Called(ctx, id)

	var r0 *db.BookThumbnail
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.BookThumbnail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.BookThumbnail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLibrary provides a mock function with given fields: ctx, id
func (_m *Interface) GetLibrary(ctx context.Context, id int64) (*db.Library, error) {
	ret := _m.Called(ctx, id)

	var r0 *db.Library
	if rf, ok := ret.Get(0).(func(context.Context, int64) *db.Library); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Library)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMigration provides a mock function with given fields:
func (_m *Interface) GetMigration() (*migrate.Migrate, error) {
	ret := _m.Called()

	var r0 *migrate.Migrate
	if rf, ok := ret.Get(0).(func() *migrate.Migrate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*migrate.Migrate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: ctx, opt
func (_m *Interface) GetVolume(ctx context.Context, opt db.GetVolumeOptions) (*db.Volume, error) {
	ret := _m.Called(ctx, opt)

	var r0 *db.Volume
	if rf, ok := ret.Get(0).(func(context.Context, db.GetVolumeOptions) *db.Volume); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.GetVolumeOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeNeighbour provides a mock function with given fields: ctx, opt
func (_m *Interface) GetVolumeNeighbour(ctx context.Context, opt db.GetVolumeNeighbourOptions) (*int64, *int64, error) {
	ret := _m.Called(ctx, opt)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(context.Context, db.GetVolumeNeighbourOptions) *int64); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 *int64
	if rf, ok := ret.Get(1).(func(context.Context, db.GetVolumeNeighbourOptions) *int64); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, db.GetVolumeNeighbourOptions) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVolumeThumbnail provides a mock function with given fields: ctx, opt
func (_m *Interface) GetVolumeThumbnail(ctx context.Context, opt db.GetVolumeThumbOptions) (*db.VolumeThumbnail, error) {
	ret := _m.Called(ctx, opt)

	var r0 *db.VolumeThumbnail
	if rf, ok := ret.Get(0).(func(context.Context, db.GetVolumeThumbOptions) *db.VolumeThumbnail); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.VolumeThumbnail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.GetVolumeThumbOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields: ctx, opt
func (_m *Interface) ListBooks(ctx context.Context, opt db.ListBooksOptions) ([]db.Book, int, error) {
	ret := _m.Called(ctx, opt)

	var r0 []db.Book
	if rf, ok := ret.Get(0).(func(context.Context, db.ListBooksOptions) []db.Book); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Book)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, db.ListBooksOptions) int); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, db.ListBooksOptions) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListLibraries provides a mock function with given fields: ctx
func (_m *Interface) ListLibraries(ctx context.Context) ([]db.Library, error) {
	ret := _m.Called(ctx)

	var r0 []db.Library
	if rf, ok := ret.Get(0).(func(context.Context) []db.Library); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Library)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: ctx, opt
func (_m *Interface) ListVolumes(ctx context.Context, opt db.ListVolumesOptions) ([]db.Volume, error) {
	ret := _m.Called(ctx, opt)

	var r0 []db.Volume
	if rf, ok := ret.Get(0).(func(context.Context, db.ListVolumesOptions) []db.Volume); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.ListVolumesOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchBook provides a mock function with given fields: ctx, opt
func (_m *Interface) PatchBook(ctx context.Context, opt db.PatchBookOptions) (*db.Book, error) {
	ret := _m.Called(ctx, opt)

	var r0 *db.Book
	if rf, ok := ret.Get(0).(func(context.Context, db.PatchBookOptions) *db.Book); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.PatchBookOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchLibrary provides a mock function with given fields: ctx, opt
func (_m *Interface) PatchLibrary(ctx context.Context, opt db.PatchLibraryOptions) (*db.Library, error) {
	ret := _m.Called(ctx, opt)

	var r0 *db.Library
	if rf, ok := ret.Get(0).(func(context.Context, db.PatchLibraryOptions) *db.Library); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Library)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.PatchLibraryOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBookThumbnail provides a mock function with given fields: ctx, thumbnail
func (_m *Interface) SetBookThumbnail(ctx context.Context, thumbnail db.BookThumbnail) error {
	ret := _m.Called(ctx, thumbnail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.BookThumbnail) error); ok {
		r0 = rf(ctx, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVolumeProgress provides a mock function with given fields: ctx, opt
func (_m *Interface) SetVolumeProgress(ctx context.Context, opt db.VolumeProgressOptions) error {
	ret := _m.Called(ctx, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.VolumeProgressOptions) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVolumeThumbnail provides a mock function with given fields: ctx, thumbnail
func (_m *Interface) SetVolumeThumbnail(ctx context.Context, thumbnail db.VolumeThumbnail) error {
	ret := _m.Called(ctx, thumbnail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.VolumeThumbnail) error); ok {
		r0 = rf(ctx, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBook provides a mock function with given fields: ctx, b
func (_m *Interface) UpdateBook(ctx context.Context, b *db.Book) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Book) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterface(t mockConstructorTestingTNewInterface) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
